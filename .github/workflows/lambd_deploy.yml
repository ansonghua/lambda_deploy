name: lambda deployment

on: 
  push:
    branches: [main]
    paths:
      - lambda_function/**
      - .github/workflows/**
  pull_request:
    branches: [main]
jobs:
  setup-env:
    runs-on: ubuntu-latest
    outputs:
      env_name: ${{ steps.env-setup.outputs.env_name }}    
    steps:
    - id: env-setup
      run: |
        echo "Running on branch ${{ github.ref }}"
        echo "git hub workspace is ${{ github.workspace }}"
        pwd
  
        touch abc.txt
        mkdir -p artifact/python
        ls abc.txt
        cp abc.txt artifact/python/
        ls artifact/python/abc.txt

        echo "git hub workspace is ${{ github.workspace }}"
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "env_name=main" >> "$GITHUB_OUTPUT"
        elif [ "${{ github.ref }}" = "refs/heads/dev" ]; then
          echo "env_name=dev" >> "$GITHUB_OUTPUT"
        else
           echo "env_name=feature" >> "$GITHUB_OUTPUT"
        fi 
    - uses: actions/upload-artifact@v3
      with:
        name: artifact
        path: artifact/python

    - run: |
        echo "${{ steps.env-setup.outputs.env_name }}"

  build:
    runs-on: ubuntu-latest
    needs: [setup-env]
    environment: 
      name: ${{ needs.setup-env.outputs.env_name }}
    steps:
    - run: |
        pwd
    - uses: actions/download-artifact@v3
      with:
        name: artifact
        path: artifact/python
    - name: download python zip to lambda zip location
      run: |
        pwd
        ls -al ${{ github.workspace }}/artifact/python/abc.txt

    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Install dependencies
      run: |
        pwd
        ls -al ${{ github.workspace }}/artifact/python/abc.txt
        python -m pip install --upgrade pip
        pip install ruff

    # - name: Lint with Ruff
    #   run: |
    #     ruff --format=github --select=E9,F63,F7,F82 --target-version=py39 lambda_function/*.py
    #     ruff --format=github --target-version=py39 lambda_function/*.py
    - name: Install aws cli
      run: |
        pip install awscliv2   
    - name: zip lambda
      run: | 
        cd lambda_function
        mkdir package
        pip install --target ./package -r requirements.txt
        cd package
        zip -r ../dep-package.zip .
        cd ..
        echo $github.workspace
        pwd
        ls -al 
        zip dep-package.zip *.py

#     - uses: hkusu/s3-upload-action@v2
#       id: upload # specify some ID for use in subsequent steps
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: 'us-east-1'
#         aws-bucket: amy-powerbi
#         file-path: './lambda_function/dep-package.zip'
#         output-qr-url: 'true' # specify true
#     - name: Show URL
#       run: echo '${{ steps.upload.outputs.qr-url }}' # use this output
  
    - name: upload zip 
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_ACCESS_KEY_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      run: |
        aws s3 cp lambda_function/dep-package.zip s3://amy-powerbi/dep-package.zip --region us-east-1 
#     - run: aws s3 sync builddir s3://amy-powerbi --region us-east-1 --cache-control max-age=0 --acl public-read --delete
    - name: deploy lambda code
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_ACCESS_KEY_SECRET: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        aws lambda update-function-code --function-name test_function --region us-east-1 --zip-file fileb://${{ github.workspace }}/lambda_function/dep-package.zip
        aws lambda update-function-code --function-name justification_lambda --region us-east-1 --zip-file fileb://${{ github.workspace }}/lambda_function/dep-package.zip